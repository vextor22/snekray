# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  CODECOV_TOKEN: 'd6999d90-bc8b-43bd-b0a3-4362b8ee5d60'

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        PYTHONPATH=./src coverage run --source ./src -m pytest --junitxml=reports/junit.xml --html=reports/report.html
    - name: Generate coverage reports
      run: |
        coverage xml -o reports/coverage.xml
        coverage html -d reports/coverage
      if: ${{ always() }}
    - name: Upload coverage reports to Codecov with GitHub Action
      uses: codecov/codecov-action@v3
      if: ${{ always() }}
    #- name: Generate Badges
    #  run: |
    #    genbadge tests -i reports/junit.xml -o reports/pytest.svg
    #    genbadge coverage -i reports/coverage.xml -o reports/coverage.svg
    #  if: ${{ always() }}
    - name: Upload pytest test results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: reports/
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}